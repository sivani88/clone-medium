#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

working_dir="$(dirname ${0})"

source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ -z ${1+x} ]]; then
 message_error "Backup filename is not specified yet it is a required parameter. Make sure you provide one and try again."
 exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"

if [[ ! -f "${backup_filename}" ]]; then
 message_error "No backup with the specified backup filename was found. Check out the 'backups' maintenance script output to see if there in one and try again"
 exit 1
fi

message_welcome "Restoring the '${POSTGRES_DB}' database from the '${backup_filename}' backup..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
 message_error "Restoring as 'postgres' user is not allowed. Assign 'POSTGRES_USER' env with another one and try again."
 exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

message_info "Terminating all active connections to the database..."
psql -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '${PGDATABASE}' AND pid <> pg_backend_pid();" >> "${working_dir}/restore.log" 2>&1

message_info "Dropping the database..."
if ! dropdb "${PGDATABASE}" >> "${working_dir}/restore.log" 2>&1; then
 message_error "Failed to drop the database. Check ${working_dir}/restore.log for details."
 exit 1
fi

message_info "Creating a new database..."
if ! createdb --owner="${POSTGRES_USER}" >> "${working_dir}/restore.log" 2>&1; then
 message_error "Failed to create a new database. Check ${working_dir}/restore.log for details."
 exit 1
fi

message_info "Applying the backup to the new database..."
if ! gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}" >> "${working_dir}/restore.log" 2>&1; then
 message_error "Failed to apply the backup to the new database. Check ${working_dir}/restore.log for details."
 exit 1
fi

message_success "The '${POSTGRES_DB}' database has been restored successfully from the '${backup_filename}' backup"
